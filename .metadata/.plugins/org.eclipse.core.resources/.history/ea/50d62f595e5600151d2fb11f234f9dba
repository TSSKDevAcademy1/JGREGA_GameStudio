package gameStudio;

import java.util.List;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Produces;
import javax.inject.Inject;
import javax.inject.Named;
import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import org.jboss.tools.examples.model.Member;

@ApplicationScoped
public class LoginValidate {

    @Inject
    private EntityManager em;
    
    @Inject
    @Named
    private Regdata regdata;
    
    //@Produces
    
    @Inject
    private LoggedUser loggeduser;

    public Regdata findById(Long id) {
        return em.find(Regdata.class, id);
    }
    
    // Kontrola ci USER s danym menom sa uz nenachadza v databaze
    public boolean userExist(){
    	System.out.println(regdata.getLogin());
//    	Regdata genres= em.createQuery("select c from Regdata c where c.login =:login",Regdata.class).setParameter("login", regdata.getLogin()).getSingleResult();
//    	Regdata genres= em.createQuery("select c from Regdata c where c.login =:login",Regdata.class).setParameter("login", regdata.getLogin()).getSingleResult();
    	List<Regdata> genres = em.createQuery("SELECT g FROM Regdata g", Regdata.class).getResultList();
    	System.out.println("Toto je vysledok "+genres.get(2)+"");
    	try{
//    	Regdata genres= em.createQuery("select c from Regdata c where c.login =:login",Regdata.class).setParameter("login", regdata.getLogin()).getSingleResult();
    	System.out.println(genres);
    		return true;
    	}catch(Exception e){
    		System.out.println("userExist = false");
    		return false;
    	}    	
    }
    
    public boolean isRegistered(String login,String pass){	

//    	String login = regdata.getLogin();
    	System.out.println(login);
//    	String pass = regdata.getPasswd();
    	System.out.println(pass);
    	////login
    	 CriteriaBuilder cblog = em.getCriteriaBuilder();
         CriteriaQuery<Regdata> criterialog = cblog.createQuery(Regdata.class);
         Root<Regdata> memberlog = criterialog.from(Regdata.class);
        
         criterialog.select(memberlog).where(cblog.equal(memberlog.get("login"), login));
        //// password
         CriteriaBuilder cbpass = em.getCriteriaBuilder();
         CriteriaQuery<Regdata> criteriapass = cbpass.createQuery(Regdata.class);
         Root<Regdata> memberpass = criteriapass.from(Regdata.class);
         
         criteriapass.select(memberpass).where(cbpass.equal(memberpass.get("passwd"), pass));
         
         	
		try {
			if (em.createQuery(criteriapass).getSingleResult() != null
					&& em.createQuery(criterialog).getSingleResult() != null) {
				System.out.println("je tu");	
				loggeduser.setLogin(login);
				System.out.println("je tu");
				loggeduser.setPasswd(pass);
				System.out.println("je tu");
	         
					return true;
			}
		} catch (Exception e) {
			return false;
		}
		return false;
        	 
    }    

    
    public Member findByEmail(String email) {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Member> criteria = cb.createQuery(Member.class);
        Root<Member> member = criteria.from(Member.class);
        // Swap criteria statements if you would like to try out type-safe criteria queries, a new
        // feature in JPA 2.0
        // criteria.select(member).where(cb.equal(member.get(Member_.name), email));
        criteria.select(member).where(cb.equal(member.get("email"), email));
        return em.createQuery(criteria).getSingleResult();
    }

    public List<Member> findAllOrderedByName() {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Member> criteria = cb.createQuery(Member.class);
        Root<Member> member = criteria.from(Member.class);
        // Swap criteria statements if you would like to try out type-safe criteria queries, a new
        // feature in JPA 2.0
        // criteria.select(member).orderBy(cb.asc(member.get(Member_.name)));
        criteria.select(member).orderBy(cb.asc(member.get("name")));
        return em.createQuery(criteria).getResultList();
    }
}
