package gameStudio;

import java.util.List;

import javax.enterprise.context.ApplicationScoped;
import javax.inject.Inject;
import javax.inject.Named;
import javax.persistence.EntityManager;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

import org.jboss.tools.examples.model.Member;

@ApplicationScoped
public class LoginValidate {

    @Inject
    private EntityManager em;
    
    @Inject
    @Named
    private Regdata regdata;

    public Member findById(Long id) {
        return em.find(Member.class, id);
    }

    public boolean isRegistered(){	
//    	String login = regdata.getLogin();
//    	System.out.println(login);
//    	String pass = regdata.getPasswd();
//    	List<Regdata> logData= 
//				em.createQuery("select id from Regdata where login = :login ",Regdata.class)
//				.setParameter("login", login).getResultList();
//    	if(logData == null){
//    		return false;
//    	}else{
//    		return true;
//    	}
    	String login = regdata.getLogin();
    	System.out.println(login);
    	String pass = regdata.getPasswd();
    	System.out.println(pass);
    	////login
    	 CriteriaBuilder cblog = em.getCriteriaBuilder();
         CriteriaQuery<Regdata> criterialog = cblog.createQuery(Regdata.class);
         Root<Regdata> memberlog = criterialog.from(Regdata.class);
        
         criterialog.select(memberlog).where(cblog.equal(memberlog.get("login"), login));
        //// password
         CriteriaBuilder cbpass = em.getCriteriaBuilder();
         CriteriaQuery<Regdata> criteriapass = cbpass.createQuery(Regdata.class);
         Root<Regdata> memberpass = criteriapass.from(Regdata.class);
        
         criteriapass.select(memberpass).where(cbpass.equal(memberpass.get("login"), login));
          
         if(em.createQuery(criteriapass).getSingleResult() !=null && em.createQuery(criterialog).getSingleResult() !=null){
        	 return true;
         }else{
        	 return false;
         }
        	 
    }
    
//    public Regdata isRegisteredLogin(){	
//
//    	String login = regdata.getLogin();
//    	System.out.println(login);
//    	String pass = regdata.getPasswd();
//    	System.out.println(pass);
//    	
//    	 CriteriaBuilder cb = em.getCriteriaBuilder();
//         CriteriaQuery<Regdata> criteria = cb.createQuery(Regdata.class);
//         Root<Regdata> member = criteria.from(Regdata.class);
//        
//         criteria.select(member).where(cb.equal(member.get("login"), login));
//         
//         return em.createQuery(criteria).getSingleResult();    		
//    }
    
    public Member findByEmail(String email) {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Member> criteria = cb.createQuery(Member.class);
        Root<Member> member = criteria.from(Member.class);
        // Swap criteria statements if you would like to try out type-safe criteria queries, a new
        // feature in JPA 2.0
        // criteria.select(member).where(cb.equal(member.get(Member_.name), email));
        criteria.select(member).where(cb.equal(member.get("email"), email));
        return em.createQuery(criteria).getSingleResult();
    }

    public List<Member> findAllOrderedByName() {
        CriteriaBuilder cb = em.getCriteriaBuilder();
        CriteriaQuery<Member> criteria = cb.createQuery(Member.class);
        Root<Member> member = criteria.from(Member.class);
        // Swap criteria statements if you would like to try out type-safe criteria queries, a new
        // feature in JPA 2.0
        // criteria.select(member).orderBy(cb.asc(member.get(Member_.name)));
        criteria.select(member).orderBy(cb.asc(member.get("name")));
        return em.createQuery(criteria).getResultList();
    }
}
